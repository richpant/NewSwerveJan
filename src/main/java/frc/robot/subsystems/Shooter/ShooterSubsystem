// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems.arm;

//import org.lasarobotics.hardware.revrobotics.Spark;
//import org.lasarobotics.hardware.revrobotics.Spark.MotorKind;

import com.revrobotics.CANSparkBase.ControlType;
import com.revrobotics.CANSparkBase.IdleMode;

import edu.wpi.first.units.Dimensionless;
import edu.wpi.first.units.Measure;
import edu.wpi.first.units.Units;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

public class ArmSubsystem extends SubsystemBase {
  public static class Hardware {
    private Spark lArmMotor;
    private Spark rArmMotor;

    public Hardware(Spark lArmMotor, Spark rArmMotor) {
      this.lArmMotor = lArmMotor;
      this.rArmMotor = rArmMotor;
    }
  }

  private Spark m_lArmMotor;
  private Spark m_rArmMotor;

  private final Measure<Dimensionless> ARM_VELOCITY;

  /** Creates a new ClimberSubsystem. */
  public ArmSubsystem(Hardware armHardware, Measure<Dimensionless> armVelocity) {
    this.m_lArmMotor = armHardware.lArmMotor;
    this.m_rArmMotor = armHardware.rArmMotor;

    //m_rArmMotor.setInverted(true);

    m_lArmMotor.enableReverseLimitSwitch();
    m_rArmMotor.enableReverseLimitSwitch();

    m_lArmMotor.setIdleMode(IdleMode.kBrake);
    m_rArmMotor.setIdleMode(IdleMode.kBrake);

    ARM_VELOCITY = armVelocity;
  }

  /**
   * Initialize hardware devices for subsystem
   * @return Hardware object containing all necessary devices for this subsystem
   */
  public static Hardware initializeHardware() {
    Hardware climberHardware = new Hardware(
      new Spark(Constants.ArmHardware.LEFT_ARM_MOTOR_ID, MotorKind.NEO),
      new Spark(Constants.ArmHardware.RIGHT_ARM_MOTOR_ID, MotorKind.NEO)
    );

    return armHardware;
  }

  // Raises the arms
  private void raiseClimber() {
    m_lArmMotor.set(ARM_VELOCITY.in(Units.Percent), ControlType.kDutyCycle);
    m_rArmMotor.set(ARM_VELOCITY.in(Units.Percent), ControlType.kDutyCycle);
  }

  // Lowers the arms
  private void lowerClimber() {
    m_lArmMotor.set(-ARM_VELOCITY.in(Units.Percent), ControlType.kDutyCycle);
    m_rArmMotor.set(-ARM_VELOCITY.in(Units.Percent), ControlType.kDutyCycle);
  }

  // Stop both motors
  private void stop() {
    m_lArmMotor.stopMotor();
    m_rArmMotor.stopMotor();
  }

  /**
   * Raise arms
   * @return Command to run the motors
   */
  public Command raiseArmCommand() {
    return runEnd(() -> raiseArm(), () -> stop());
  }

  /**
   * Lower arms
   * @return Command to run the motors in the reverse direction
   */
  public Command lowerArmCommand() {
    return runEnd(() -> lowerArm(), () -> stop());
  }

  @Override
  public void periodic() {
    m_lArmMotor.periodic();
    m_rArmMotor.stopMotor();
  }
}